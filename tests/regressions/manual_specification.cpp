/**
 * ------------------------ Auto-generated Code ------------------------ 
 *           This code was generated by the Insieme Compiler 
 * --------------------------------------------------------------------- 
 */
#include <alloca.h>
#include <allscale/api/user/data/static_grid.h>
#include <allscale/runtime.hpp>
#include <allscale/utils/vector.h>
#include <stdbool.h>
#include <stdint.h>

#ifdef __cplusplus
#define INS_INIT(...) __VA_ARGS__
#else
#define INS_INIT(...) (__VA_ARGS__)
#endif
#ifdef __cplusplus
#include <new>
#define INS_INPLACE_INIT(Loc,Type) new(Loc) Type
#else
#define INS_INPLACE_INIT(Loc,Type) *(Loc) = (Type)
#endif
#ifdef __cplusplus
				/** Workaround for libstdc++/libc bug.
				 *  There's an inconsistency between libstdc++ and libc regarding whether
				 *  ::gets is declared or not, which is only evident when using certain
				 *  compilers and language settings
				 *  (tested positively with clang 3.9 --std=c++14 and libc 2.17).
				 */
				#include <initializer_list>  // force libstdc++ to include its config
				#undef _GLIBCXX_HAVE_GETS    // correct broken config
#endif

/* ------- Program Code --------- */

struct __wi_main_variant_0;
typedef struct __wi_main_variant_0 __wi_main_variant_0;

struct __wi_main_name {
    static const char* name() { return "__wi_main"; }
};

struct __wi_main_variant_1;
typedef struct __wi_main_variant_1 __wi_main_variant_1;

struct __wi_main_can_split;
typedef struct __wi_main_can_split __wi_main_can_split;

using __wi_main_work = allscale::work_item_description<int32_t, __wi_main_name, allscale::no_serialization, __wi_main_variant_0, __wi_main_variant_1, __wi_main_can_split >;

/* ------- Function Definitions --------- */
int32_t main(int32_t var_0, char** var_1) {
    return allscale::runtime::main_wrapper<__wi_main_work >(var_0, var_1);
}

ALLSCALE_REGISTER_TREETURE_TYPE(int32_t)
using data_item_type_1 = allscale::api::user::data::StaticGrid<int32_t, 10u >;
REGISTER_DATAITEMSERVER_DECLARATION(data_item_type_1)
REGISTER_DATAITEMSERVER(data_item_type_1)
struct __wi_allscale_wi_1_can_split;
typedef struct __wi_allscale_wi_1_can_split __wi_allscale_wi_1_can_split;

struct __wi_allscale_wi_1_variant_1;
typedef struct __wi_allscale_wi_1_variant_1 __wi_allscale_wi_1_variant_1;

struct __wi_allscale_wi_1_name {
    static const char* name() { return "__wi_allscale_wi_1"; }
};

struct __wi_allscale_wi_1_variant_0;
typedef struct __wi_allscale_wi_1_variant_0 __wi_allscale_wi_1_variant_0;

using __wi_allscale_wi_1_work = allscale::work_item_description<void, __wi_allscale_wi_1_name, allscale::no_serialization, __wi_allscale_wi_1_variant_0, __wi_allscale_wi_1_variant_1, __wi_allscale_wi_1_can_split >;

/* ------- Function Definitions --------- */
allscale::treeture<void > allscale_fun_8(allscale::runtime::dependencies const& var_0, hpx::util::tuple<int32_t, allscale::runtime::DataItemReference<allscale::api::user::data::StaticGrid<int32_t, 10u > > > const& var_1) {
    return allscale::spawn_first_with_dependencies<__wi_allscale_wi_1_work >(var_0, hpx::util::get<0 >(var_1), hpx::util::get<1 >(var_1));
}
/* ------- Function Definitions --------- */
int32_t IMP_main(int32_t var_0, char** var_1) {
    allscale::runtime::DataItemReference<allscale::api::user::data::StaticGrid<int32_t, 10u > > var_2 = allscale::runtime::DataItemManager::create<allscale::api::user::data::StaticGrid<int32_t, 10u > >();
    auto var_3 = allscale::runtime::make_prec_operation<int32_t, void >((hpx::util::tuple<allscale::runtime::DataItemReference<allscale::api::user::data::StaticGrid<int32_t, 10u > > > const&)INS_INIT(hpx::util::tuple<allscale::runtime::DataItemReference<allscale::api::user::data::StaticGrid<int32_t, 10u > > >){(allscale::runtime::DataItemReference<allscale::api::user::data::StaticGrid<int32_t, 10u > > const&)var_2}, &allscale_fun_8);
    var_3(10).get_result();
    bool var_4 = (bool)true;
    {
        int32_t var_5 = 0;
        while ((int64_t)var_5 < allscale::runtime::DataItemManager::get(var_2).size().operator[]((uint64_t)0)) {
            if (allscale::runtime::DataItemManager::get(var_2).operator[](allscale::utils::Vector<long, 1 >{(int64_t)var_5}) != 1) {
                var_4 = (bool)false;
                break;
            };
            ++var_5;
        };
    };
    return var_4 ? 0 : 1;
}
/* ------- Function Definitions --------- */
allscale::treeture<int32_t > allscale_fun_3(hpx::util::tuple<int32_t, char** > const& var_0) {
    return allscale::treeture<int32_t >(IMP_main(hpx::util::get<0 >(var_0), hpx::util::get<1 >(var_0)));
}
struct __wi_main_variant_0 {
    static allscale::treeture<int32_t > execute(hpx::util::tuple<int32_t, char** > const& var_0);
    static constexpr bool valid = true;
};

/* ------- Function Definitions --------- */
bool allscale_fun_24(hpx::util::tuple<int32_t, allscale::runtime::DataItemReference<allscale::api::user::data::StaticGrid<int32_t, 10u > > > const& var_0) {
    return *(int32_t*)(&hpx::util::get<0 >(var_0)) <= 0;
}
/* ------- Function Definitions --------- */
bool allscale_fun_28(hpx::util::tuple<int32_t, allscale::runtime::DataItemReference<allscale::api::user::data::StaticGrid<int32_t, 10u > > > const& var_0) {
    return !allscale_fun_24(var_0);
}
struct __wi_allscale_wi_1_can_split {
    static bool call(hpx::util::tuple<int32_t, allscale::runtime::DataItemReference<allscale::api::user::data::StaticGrid<int32_t, 10u > > > const& var_0);
};

bool __wi_allscale_wi_1_can_split::call(hpx::util::tuple<int32_t, allscale::runtime::DataItemReference<allscale::api::user::data::StaticGrid<int32_t, 10u > > > const& var_0) {
    return allscale_fun_28(var_0);
}
/* ------- Function Prototypes ---------- */
void rec(hpx::util::tuple<int32_t, allscale::runtime::DataItemReference<allscale::api::user::data::StaticGrid<int32_t, 10u > > > const& p1);

/* ------- Function Definitions --------- */
allscale::runtime::unused_type allscale_fun_21(hpx::util::tuple<int32_t, allscale::runtime::DataItemReference<allscale::api::user::data::StaticGrid<int32_t, 10u > > > const& var_0) {
    rec(var_0);
    return {};
}
struct __wi_allscale_wi_1_variant_1 {
    static allscale::runtime::unused_type execute(hpx::util::tuple<int32_t, allscale::runtime::DataItemReference<allscale::api::user::data::StaticGrid<int32_t, 10u > > > const& var_0);
    static constexpr bool valid = true;
};

/* ------- Function Definitions --------- */
void allscale_fun_26(hpx::util::tuple<int32_t, allscale::runtime::DataItemReference<allscale::api::user::data::StaticGrid<int32_t, 10u > > > const& var_0) { }
/* ------- Function Definitions --------- */
void allscale_fun_27(hpx::util::tuple<int32_t, allscale::runtime::DataItemReference<allscale::api::user::data::StaticGrid<int32_t, 10u > > > const& var_0) {
    allscale::api::user::data::StaticGrid<int32_t, 10u >&& var_1 = allscale::runtime::DataItemManager::get((allscale::runtime::DataItemReference<allscale::api::user::data::StaticGrid<int32_t, 10u > >&)hpx::util::get<1 >(var_0));
    var_1.operator[](allscale::utils::Vector<long, 1 >{(int64_t)(*(int32_t*)(&hpx::util::get<0 >(var_0)) - 1)}) = 1;
    return rec((hpx::util::tuple<int32_t, allscale::runtime::DataItemReference<allscale::api::user::data::StaticGrid<int32_t, 10u > > > const&)INS_INIT(hpx::util::tuple<int32_t, allscale::runtime::DataItemReference<allscale::api::user::data::StaticGrid<int32_t, 10u > > >){*(int32_t*)(&hpx::util::get<0 >(var_0)) - 1, (allscale::runtime::DataItemReference<allscale::api::user::data::StaticGrid<int32_t, 10u > > const&)hpx::util::get<1 >(var_0)});
}
/* ------- Function Definitions --------- */
void rec(hpx::util::tuple<int32_t, allscale::runtime::DataItemReference<allscale::api::user::data::StaticGrid<int32_t, 10u > > > const& var_0) {
    if (allscale_fun_24(var_0)) {
        return allscale_fun_26(var_0);
    } else {
        return allscale_fun_27(var_0);
    };
}
allscale::runtime::unused_type __wi_allscale_wi_1_variant_1::execute(hpx::util::tuple<int32_t, allscale::runtime::DataItemReference<allscale::api::user::data::StaticGrid<int32_t, 10u > > > const& var_0) {
    return allscale_fun_21(var_0);
}
/* ------- Function Definitions --------- */
allscale::treeture<void > allscale_fun_12(hpx::util::tuple<int32_t, allscale::runtime::DataItemReference<allscale::api::user::data::StaticGrid<int32_t, 10u > > > const& var_0) {
    allscale::api::user::data::StaticGrid<int32_t, 10u >&& var_1 = allscale::runtime::DataItemManager::get((allscale::runtime::DataItemReference<allscale::api::user::data::StaticGrid<int32_t, 10u > >&)hpx::util::get<1 >(var_0));
    var_1.operator[](allscale::utils::Vector<long, 1 >{(int64_t)(*(int32_t*)(&hpx::util::get<0 >(var_0)) - 1)}) = 1;
    return allscale::spawn_with_dependencies<__wi_allscale_wi_1_work >(allscale::runtime::after(), *(int32_t*)(&hpx::util::get<0 >(var_0)) - 1, (allscale::runtime::DataItemReference<allscale::api::user::data::StaticGrid<int32_t, 10u > > const&)hpx::util::get<1 >(var_0));
}
/* ------- Function Definitions --------- */
allscale::treeture<void > allscale_fun_10(hpx::util::tuple<int32_t, allscale::runtime::DataItemReference<allscale::api::user::data::StaticGrid<int32_t, 10u > > > const& var_0) {
    return allscale_fun_12(var_0);
}
/* ------- Function Definitions --------- */
hpx::util::tuple<allscale::runtime::DataItemRequirement<allscale::api::user::data::StaticGrid<int32_t, 10u > > > allscale_fun_16(hpx::util::tuple<int32_t, allscale::runtime::DataItemReference<allscale::api::user::data::StaticGrid<int32_t, 10u > > > const& var_0) {
    return INS_INIT(hpx::util::tuple<allscale::runtime::DataItemRequirement<allscale::api::user::data::StaticGrid<int32_t, 10u > > >){allscale::runtime::createDataItemRequirement((allscale::runtime::DataItemReference<allscale::api::user::data::StaticGrid<int32_t, 10u > >&)hpx::util::get<1 >(*(const hpx::util::tuple<int32_t, allscale::runtime::DataItemReference<allscale::api::user::data::StaticGrid<int32_t, 10u > > >*)(&var_0)), allscale::api::user::data::GridRegion<1>::single(allscale::utils::Vector<long, 1 >{(int64_t)(hpx::util::get<0 >(var_0) - 1)}), allscale::runtime::AccessMode::ReadWrite)};
}
struct __wi_allscale_wi_1_variant_0 {
    static allscale::treeture<void > execute(hpx::util::tuple<int32_t, allscale::runtime::DataItemReference<allscale::api::user::data::StaticGrid<int32_t, 10u > > > const& var_0);
    static hpx::util::tuple<allscale::runtime::DataItemRequirement<allscale::api::user::data::StaticGrid<int32_t, 10u > > > get_requirements(hpx::util::tuple<int32_t, allscale::runtime::DataItemReference<allscale::api::user::data::StaticGrid<int32_t, 10u > > > const& var_0);
    static constexpr bool valid = true;
};

hpx::util::tuple<allscale::runtime::DataItemRequirement<allscale::api::user::data::StaticGrid<int32_t, 10u > > > __wi_allscale_wi_1_variant_0::get_requirements(hpx::util::tuple<int32_t, allscale::runtime::DataItemReference<allscale::api::user::data::StaticGrid<int32_t, 10u > > > const& var_0) {
    return allscale_fun_16(var_0);
}
allscale::treeture<void > __wi_allscale_wi_1_variant_0::execute(hpx::util::tuple<int32_t, allscale::runtime::DataItemReference<allscale::api::user::data::StaticGrid<int32_t, 10u > > > const& var_0) {
    return allscale_fun_10(var_0);
}
allscale::treeture<int32_t > __wi_main_variant_0::execute(hpx::util::tuple<int32_t, char** > const& var_0) {
    return allscale_fun_3(var_0);
}
struct __wi_main_variant_1 {
    static allscale::treeture<int32_t > execute(hpx::util::tuple<int32_t, char** > const& var_0);
    static constexpr bool valid = true;
};

allscale::treeture<int32_t > __wi_main_variant_1::execute(hpx::util::tuple<int32_t, char** > const& var_0) {
    return allscale_fun_3(var_0);
}
/* ------- Function Definitions --------- */
bool allscale_fun_34(hpx::util::tuple<int32_t, char** > const& var_0) {
    return (bool)false;
}
struct __wi_main_can_split {
    static bool call(hpx::util::tuple<int32_t, char** > const& var_0);
};

bool __wi_main_can_split::call(hpx::util::tuple<int32_t, char** > const& var_0) {
    return allscale_fun_34(var_0);
}

